trigger:
- main # Automatically triggers on updates to the 'main' branch

pool:
  name: gittoacr # Specify the agent pool

variables:
  - group: pipelines connector # Reference the first variable group
  - group: gittoacr

steps:
# Step 1: Checkout the GitHub repository
- checkout: self
  displayName: 'Clone GitHub Repository'

# Step 2: Login to Azure Container Registry (ACR) using Azure CLI
- script: |
    echo Logging in to Azure Container Registry using Azure CLI...
    az acr login --name $(acrLoginServer)
    echo Logged into ACR successfully!
  displayName: 'Login to ACR via Azure CLI'

# Step 3: Build the project
- script: |
    echo Building the project...
    REM Add specific commands for your project build below
    echo Project build completed successfully!
  displayName: 'Build Project'

# Step 4: Build Docker Image
- script: |
    echo Building Docker image...
    docker build -t $(acrLoginServer).azurecr.io/$(acrRepository):$(dockerImageTag) .
    echo Docker image built successfully!
  displayName: 'Build Docker Image via CLI'

# Step 5: Push Docker Image to ACR
- script: |
    echo Pushing Docker image to ACR...
    docker push $(acrLoginServer).azurecr.io/$(acrRepository):$(dockerImageTag)
    echo Docker image pushed successfully!
  displayName: 'Push Docker Image via CLI'

# Step 6: Confirm the Docker image was pushed successfully
- script: |
    echo Docker image successfully pushed to ACR!
    echo Image URL: $(acrLoginServer).azurecr.io/$(acrRepository):$(dockerImageTag)
  displayName: 'Confirm Docker Image Push'

- task: PowerShell@2
  displayName: 'Trigger Second Pipeline'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Triggering second pipeline using Azure DevOps REST API..."
      
      # Build URL and encode it to handle special characters
      $url = [System.Uri]::EscapeUriString("https://dev.azure.com/$(Organization)/$(SecondProject)/_apis/pipelines/$(pipelineId)/runs?api-version=7.1-preview")
      
      # Build Authorization Header
      $headers = @{
        Authorization = "Basic $([convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('$(AZURE_DEVOPS_USERNAME):$(AZURE_DEVOPS_PAT)')))"
      }
      
      # Define the body for the REST API call
      $body = '{"resources": {"repositories": {"self": {"refName": "refs/heads/main"}}}}'

      # Make the REST API POST request
      try {
        $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Post -Body $body -ContentType "application/json"
        Write-Host "Second pipeline triggered successfully! Response: $($response | ConvertTo-Json -Depth 10)"
      } catch {
        Write-Error "Failed to trigger the second pipeline. Error: $_"
        throw
      }
